"""

Для каждого упражнения написать программную реализацию.
Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах
в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее
эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
● выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
● написать 3 варианта кода (один у вас уже есть);
● проанализировать 3 варианта и выбрать оптимальный;
● результаты анализа (количество занятой памяти в вашей среде разработки)
вставить в виде комментариев в файл с кодом.
Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
● написать общий вывод: какой из трёх вариантов лучше и почему.

1. Подсчитать, сколько было выделено памяти под переменные в ранее
разработанных программах в рамках первых трех уроков. Проанализировать
результат и определить программы с наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько
вариантов кода для одной и той же задачи. Результаты анализа вставьте в виде
комментариев к коду. Также укажите в комментариях версию Python и разрядность
вашей ОС.'''

"""
"""

Вывод:

Размер листа зависит от размера массива и не зависит от разрядности чисел, 
так же он больше чем неизменяемый кортеж с одинаковым набором данных.
Размер листа: 460 байт.
Размер кортежа: 428 байт.
Размер элемента массива: 14 байт.
Размер всех элементов: 1396.
Размер всех элементов в несколько раз больше размера массива в целом - это обьясняется тем, что Python
создает ссылки на один и тот же обьект, проводит оптимизацию.

Windows 10 Pro x64
Python 3.7.4

"""

from random import randint
import sys

array = [randint(0, 150) for _ in range(100)]
print(f'Старый массив: {array}')

n_min_1 = 0
n_min_2 = 1

for i in array:
    if array[n_min_1] > i:
        n_min_2 = n_min_1
        n_min_1 = array.index(i)
    elif array[n_min_2] > i:
        n_min_2 = array.index(i)

print(f'Два наименьших элемента: {array[n_min_1]} и {[n_min_2]}')

print('Размер листа', sys.getsizeof(array))
print('Размер элемента листа', sys.getsizeof(array[0]))
print('Размер кортежа', sys.getsizeof(tuple(array)))
print('Размер элемента кортежа', sys.getsizeof(tuple(array)[0]))
sum = 0
for size in array:
    sum += sys.getsizeof(size)
print('Размер всех элементов в листе', sum)